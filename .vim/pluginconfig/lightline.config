let g:lightline = {
 \ 'colorscheme': 'wombat',
 \ 'mode_map': {'c': 'NORMAL'},
 \ 'active': {
 \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filenamerelative','pwd' ] ]
 \ },
 \ 'component_function': {
 \   'modified': 'LightlineModified',
 \   'readonly': 'LightlineReadonly',
 \   'fugitive': 'LightlineFugitive',
 \   'filename': 'LightlineFilename',
 \   'filenamerelative': 'LightlineFilenameRelative',
 \   'fileformat': 'LightlineFileformat',
 \   'filetype': 'LightlineFiletype',
 \   'fileencoding': 'LightlineFileencoding',
 \   'pwd': 'LightlineCurrentDirectory',
 \   'mode': 'LightlineMode'
 \ },
 \}

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFilenameRelative()
    let s:filename_with_path_from_currentdir_to_filedir = substitute(expand('%:p'), getcwd().'/', "", "e")
    return '' != s:filename_with_path_from_currentdir_to_filedir ? s:filename_with_path_from_currentdir_to_filedir : '[No Name]'
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineCurrentDirectory()
    let s:currentdir_relativepath = substitute(getcwd(), expand('~'), "~", "e")
    return winwidth(0) > 70 ? s:currentdir_relativepath : ''
    "return winwidth(0) > 70 ? getcwd() : '' "absolute path
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
\}
