"get syntax info
function! s:get_syn_id(transparent)
  let synid = synID(line("."), col("."), 1)
  if a:transparent
    return synIDtrans(synid)
  else
    return synid
  endif
endfunction
function! s:get_syn_attr(synid)
  let name = synIDattr(a:synid, "name")
  let ctermfg = synIDattr(a:synid, "fg", "cterm")
  let ctermbg = synIDattr(a:synid, "bg", "cterm")
  let guifg = synIDattr(a:synid, "fg", "gui")
  let guibg = synIDattr(a:synid, "bg", "gui")
  return {
        \ "name": name,
        \ "ctermfg": ctermfg,
        \ "ctermbg": ctermbg,
        \ "guifg": guifg,
        \ "guibg": guibg}
endfunction
function! s:get_syn_info()
  let baseSyn = s:get_syn_attr(s:get_syn_id(0))
  echo "name: " . baseSyn.name .
        \ " ctermfg: " . baseSyn.ctermfg .
        \ " ctermbg: " . baseSyn.ctermbg .
        \ " guifg: " . baseSyn.guifg .
        \ " guibg: " . baseSyn.guibg
  let linkedSyn = s:get_syn_attr(s:get_syn_id(1))
  echo "link to"
  echo "name: " . linkedSyn.name .
        \ " ctermfg: " . linkedSyn.ctermfg .
        \ " ctermbg: " . linkedSyn.ctermbg .
        \ " guifg: " . linkedSyn.guifg .
        \ " guibg: " . linkedSyn.guibg
endfunction

command! SyntaxInfo call s:get_syn_info()

"errorformat test fuction (example: latexmk)
function! s:format_test()
    let msg = [
        \"! Missing $ inserted.\n",
        \"<inserted text> \n",
        \"               $\n",
        \"l.65 \section\n",
        \"               {To Do}\n",
        \"\n",
        \"! Undefined control sequence.\n",
        \"l.63 \arienai\n",
        \"\n",
        \"Package hyperref Warning: Rerun to get /PageLabels entry.\n",
        \"Overfull \hbox (2429.52956pt too wide) in paragraph at lines 2--3\n",
        \]
    try
        let errorformatbackup = &errorformat
        let &errorformat = '
            \%m\ at\ lines\ %l%.%#,
            \%.%# Warning:\ %m,
            \%A!\ %m,
            \%Cl.%l\ %m,
            \%Z\n,
            \%C%m,
            \%-G%.%#,
            \'
        cgetexpr msg
        cwindow
    finally
        let &errorformat = errorformatbackup
    endtry
endfunction

command! ErrorFormatTest call s:format_test()

